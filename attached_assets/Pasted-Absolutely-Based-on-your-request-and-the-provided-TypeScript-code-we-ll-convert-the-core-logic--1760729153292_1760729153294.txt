Absolutely! Based on your request and the provided TypeScript code, we‚Äôll **convert the core logic** of the `CampaignGenerator` class and supporting data models into **Python using FastAPI**, suitable for a GenAI project.

We'll:
- Preserve the business logic (campaign idea generation, channel planning, etc.)
- Use Pydantic models for type safety and request/response validation
- Use in-memory storage (like the original `MemStorage`) for MVP
- Structure the project in a clean, scalable FastAPI layout

---

## ‚úÖ Project Structure

```
nexusplanner/
‚îÇ
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py                  # FastAPI app entrypoint
‚îÇ   ‚îú‚îÄ‚îÄ models/                  # Pydantic models (schemas)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ market_signal.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ service.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ campaign.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ request.py
‚îÇ   ‚îú‚îÄ‚îÄ storage/                 # In-memory storage
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ mem_storage.py
‚îÇ   ‚îî‚îÄ‚îÄ services/                # Business logic
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îî‚îÄ‚îÄ campaign_generator.py
‚îÇ
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md
```

---

## üì¶ `requirements.txt`

```txt
fastapi==0.115.0
uvicorn[standard]==0.30.6
pydantic==2.9.2
python-dotenv==1.0.1
```

---

## üìÅ `app/models/__init__.py`

```python
from .market_signal import MarketSignal
from .service import Service
from .campaign import Campaign, CampaignIdea, ChannelPlan
from .request import CampaignGenerationRequest
```

---

## üìÑ `app/models/market_signal.py`

```python
from pydantic import BaseModel, Field
from typing import Optional
from enum import Enum

class ImpactLevel(str, Enum):
    high = "high"
    medium = "medium"
    low = "low"

class MarketSignal(BaseModel):
    id: str
    source: str
    content: str
    timestamp: str  # ISO 8601
    relevance_score: float = Field(ge=0.0, le=1.0)
    category: Optional[str] = None
    impact: Optional[ImpactLevel] = None
```

---

## üìÑ `app/models/service.py`

```python
from pydantic import BaseModel
from typing import List, Optional

class Service(BaseModel):
    id: str
    name: str
    category: str
    description: Optional[str] = None
    target_audience: List[str]
    key_benefits: List[str]
    market_mentions: Optional[int] = None
    active_campaigns: Optional[int] = None
    backed_competitors: Optional[int] = None
    competitors: Optional[List[str]] = None
```

---

## üìÑ `app/models/campaign.py`

```python
from pydantic import BaseModel
from typing import List, Optional
from enum import Enum

class CampaignStatus(str, Enum):
    active = "active"
    draft = "draft"
    completed = "completed"

class CampaignIdea(BaseModel):
    id: str
    theme: str
    core_message: str
    target_segments: List[str]
    competitive_angle: str

class ChannelPlan(BaseModel):
    channel: str
    content_type: str
    frequency: str
    budget_allocation: float
    success_metrics: List[str]

class CampaignMetrics(BaseModel):
    engagement: Optional[str] = None
    leads: Optional[str] = None
    conversions: Optional[str] = None

class Campaign(BaseModel):
    id: str
    name: str
    status: CampaignStatus
    theme: str
    start_date: str  # YYYY-MM-DD
    end_date: str
    ideas: List[CampaignIdea]
    channel_mix: List[ChannelPlan]
    total_budget: int
    expected_roi: float
    metrics: Optional[CampaignMetrics] = None
```

---

## üìÑ `app/models/request.py`

```python
from pydantic import BaseModel
from typing import Optional

class CampaignGenerationRequest(BaseModel):
    product_service: str
    target_audience: str
    competitors: Optional[str] = None
    additional_context: Optional[str] = None
    duration_days: Optional[int] = 30
```

---

## üìÅ `app/storage/__init__.py`

```python
from .mem_storage import storage
```

---

## üìÑ `app/storage/mem_storage.py`

```python
import uuid
from datetime import datetime, timedelta
from typing import List, Optional
from ..models import Campaign, MarketSignal, Service, CampaignMetrics

class MemStorage:
    def __init__(self):
        self.campaigns: dict[str, Campaign] = {}
        self.market_signals: dict[str, MarketSignal] = {}
        self.services: dict[str, Service] = {}
        self._seed_data()

    def _id(self):
        return str(uuid.uuid4())

    def _seed_data(self):
        # Services
        services = [
            Service(
                id="svc-001",
                name="CloudScale AI Security Suite",
                category="Security",
                description="AI-powered threat detection...",
                target_audience=["CISO", "Security Teams", "IT Directors"],
                key_benefits=["Zero Trust", "Threat Prevention", "Compliance"],
                market_mentions=234,
                active_campaigns=3,
                backed_competitors=3,
                competitors=["Sentinel", "ThreatGuard Pro", "CyberShield"],
            ),
            Service(
                id="svc-002",
                name="Multi-Cloud Infrastructure Platform",
                category="Cloud Infrastructure",
                description="Unified management across AWS, Azure, and GCP...",
                target_audience=["Cloud Architects", "DevOps Teams", "CTOs"],
                key_benefits=["Unified View", "Cost Efficiency", "Automated Provisioning"],
                market_mentions=189,
                active_campaigns=6,
                backed_competitors=3,
                competitors=["CloudMaster", "MultiCloud Pro", "Infralink"],
            ),
            Service(
                id="svc-003",
                name="Enterprise AI Platform",
                category="Artificial Intelligence",
                description="End-to-end AI solution...",
                target_audience=["CDO", "AI Engineers", "Data Scientists"],
                key_benefits=["Governance", "Scalability", "Compliance"],
                market_mentions=312,
                active_campaigns=12,
                backed_competitors=3,
                competitors=["AI Enterprise", "SmartOps AI", "Neural Cloud"],
            ),
            Service(
                id="svc-004",
                name="Real-Time Analytics Engine",
                category="Data & Analytics",
                description="High-performance data processing...",
                target_audience=["Data Architects", "Analysts", "Business Intelligence Teams"],
                key_benefits=["Real-time Processing", "Predictive Modeling", "Cost Efficiency"],
                market_mentions=156,
                active_campaigns=5,
                backed_competitors=3,
                competitors=["DataFlow Pro", "Analytics Hub", "InsightEngine"],
            ),
            Service(
                id="svc-005",
                name="Edge Computing Platform",
                category="Edge & IoT",
                description="Distributed computing solution for IoT...",
                target_audience=["IoT Architects", "Manufacturing Teams", "Smart City Planners"],
                key_benefits=["Low Latency", "Edge Analytics", "IoT Integration"],
                market_mentions=143,
                active_campaigns=4,
                backed_competitors=3,
                competitors=["EdgeFlex", "IoT Cloud", "Edge Master"],
            ),
            Service(
                id="svc-006",
                name="Zero-Trust Security Framework",
                category="Security",
                description="Comprehensive zero-trust implementation...",
                target_audience=["CISO", "Security Architects", "Compliance Officers"],
                key_benefits=["Identity Verification", "Micro-segmentation", "Compliance"],
                market_mentions=278,
                active_campaigns=9,
                backed_competitors=3,
                competitors=["ZeroGuard", "TrustNet", "SecureAccess"],
            ),
        ]
        for s in services:
            self.services[s.id] = s

        # Market Signals
        now = datetime.utcnow()
        signals = [
            MarketSignal(
                id="sig-001",
                source="Gartner Report",
                content="AI security platforms surge 47%...",
                timestamp=(now - timedelta(hours=2)).isoformat() + "Z",
                relevance_score=0.92,
                category="AI",
                impact="high",
            ),
            MarketSignal(
                id="sig-002",
                source="TechCrunch",
                content="CompetitorX Launches Cloud Infrastructure Suite...",
                timestamp=(now - timedelta(hours=4)).isoformat() + "Z",
                relevance_score=0.85,
                category="Competitor",
                impact="high",
            ),
            MarketSignal(
                id="sig-003",
                source="Social Media Analytics",
                content="Enterprise AI Adoption Reaches 73%...",
                timestamp=(now - timedelta(hours=6)).isoformat() + "Z",
                relevance_score=0.88,
                category="AI",
                impact="medium",
            ),
            MarketSignal(
                id="sig-004",
                source="Social Media Analytics",
                content="Zero-Trust Architecture Keyword Surge: +250%...",
                timestamp=(now - timedelta(hours=8)).isoformat() + "Z",
                relevance_score=0.78,
                category="Security",
                impact="medium",
            ),
            MarketSignal(
                id="sig-005",
                source="IDC Industry Report",
                content="Edge Computing Demand Spike in Manufacturing Sector...",
                timestamp=(now - timedelta(hours=12)).isoformat() + "Z",
                relevance_score=0.81,
                category="Cloud",
                impact="medium",
            ),
        ]
        for sig in signals:
            self.market_signals[sig.id] = sig

        # Campaigns
        campaigns = [
            Campaign(
                id="camp-001",
                name="Q4 Cloud Security Leadership Push",
                status="active",
                theme="Zero-Trust Architecture Excellence",
                start_date="2024-10-15",
                end_date="2024-12-31",
                ideas=[
                    CampaignIdea(
                        id="idea-001",
                        theme="Zero Trust, Zero Compromise",
                        core_message="End-to-end security from code to cloud",
                        target_segments=["CISO", "Security Teams"],
                        competitive_angle="While others focus on detection, we prevent breaches at the source",
                    )
                ],
                channel_mix=[
                    ChannelPlan(channel="LinkedIn", content_type="Thought Leadership", frequency="Weekly", budget_allocation=0.35, success_metrics=["Engagement Rate", "Lead Quality"]),
                    ChannelPlan(channel="Webinar", content_type="Deep Dives", frequency="Bi-weekly", budget_allocation=0.25, success_metrics=["Attendee Count", "Conversion Rate"]),
                    ChannelPlan(channel="Email", content_type="Nurture Sequences", frequency="Daily", budget_allocation=0.20, success_metrics=["Open Rate", "Click-Through"]),
                    ChannelPlan(channel="Events", content_type="Executive Briefings", frequency="Monthly", budget_allocation=0.20, success_metrics=["Attendance", "Pipeline Generated"]),
                ],
                total_budget=50000,
                expected_roi=3.5,
                metrics=CampaignMetrics(engagement="+34% engagement"),
            ),
            Campaign(
                id="camp-002",
                name="AI Platform Launch Campaign",
                status="active",
                theme="Enterprise AI Transformation",
                start_date="2024-11-01",
                end_date="2024-11-30",
                ideas=[
                    CampaignIdea(
                        id="idea-002",
                        theme="Future-Proof Your AI Strategy",
                        core_message="Enterprise-grade AI with built-in governance and compliance",
                        target_segments=["CDO", "AI Engineers"],
                        competitive_angle="Unlike competitors, we offer SOC 2-compliant AI workflows",
                    )
                ],
                channel_mix=[
                    ChannelPlan(channel="LinkedIn", content_type="Product Updates", frequency="3x/week", budget_allocation=0.30, success_metrics=["Engagement Rate", "Follower Growth"]),
                    ChannelPlan(channel="Email", content_type="Newsletter", frequency="Weekly", budget_allocation=0.25, success_metrics=["Open Rate", "Click-Through"]),
                    ChannelPlan(channel="Blog", content_type="Technical Content", frequency="2x/week", budget_allocation=0.20, success_metrics=["Page Views", "Time on Page"]),
                    ChannelPlan(channel="Events", content_type="How-To Sessions", frequency="Weekly", budget_allocation=0.25, success_metrics=["Registration", "Attendance"]),
                ],
                total_budget=75000,
                expected_roi=4.2,
                metrics=CampaignMetrics(leads="+28% leads"),
            ),
            Campaign(
                id="camp-003",
                name="Multi-Cloud Excellence Campaign",
                status="completed",
                theme="Hybrid Cloud Infrastructure",
                start_date="2024-09-15",
                end_date="2024-10-15",
                ideas=[
                    CampaignIdea(
                        id="idea-003",
                        theme="Maximize Your Cloud Investment",
                        core_message="Unified management across AWS, Azure, and GCP",
                        target_segments=["Cloud Architects", "DevOps Teams"],
                        competitive_angle="Seamless integration with your existing tech stack",
                    )
                ],
                channel_mix=[
                    ChannelPlan(channel="LinkedIn", content_type="Case Studies", frequency="Weekly", budget_allocation=0.30, success_metrics=["Engagement Rate", "Lead Quality"]),
                    ChannelPlan(channel="Webinar", content_type="Product Demos", frequency="Weekly", budget_allocation=0.30, success_metrics=["Attendee Count", "Demo Requests"]),
                    ChannelPlan(channel="Email", content_type="Campaign Series", frequency="2x/week", budget_allocation=0.20, success_metrics=["Open Rate", "Conversion Rate"]),
                    ChannelPlan(channel="PR", content_type="Press Releases", frequency="Monthly", budget_allocation=0.20, success_metrics=["Media Pickup", "Brand Mentions"]),
                ],
                total_budget=60000,
                expected_roi=3.8,
                metrics=CampaignMetrics(conversions="+42% conversions"),
            ),
        ]
        for c in campaigns:
            self.campaigns[c.id] = c

    # Campaigns
    def get_campaigns(self) -> List[Campaign]:
        return sorted(self.campaigns.values(), key=lambda c: c.start_date, reverse=True)

    def get_recent_campaigns(self, limit: int = 3) -> List[Campaign]:
        return self.get_campaigns()[:limit]

    def get_campaign_by_id(self, cid: str) -> Optional[Campaign]:
        return self.campaigns.get(cid)

    def create_campaign(self, campaign: Campaign) -> Campaign:
        campaign.id = self._id()
        self.campaigns[campaign.id] = campaign
        return campaign

    # Market Signals
    def get_market_signals(self) -> List[MarketSignal]:
        return sorted(self.market_signals.values(), key=lambda s: s.timestamp, reverse=True)

    def get_recent_market_signals(self, limit: int = 4) -> List[MarketSignal]:
        return self.get_market_signals()[:limit]

    def add_market_signal(self, signal: MarketSignal) -> MarketSignal:
        signal.id = self._id()
        self.market_signals[signal.id] = signal
        return signal

    # Services
    def get_services(self) -> List[Service]:
        return list(self.services.values())

    def get_service_by_id(self, sid: str) -> Optional[Service]:
        return self.services.get(sid)

    # Dashboard Metrics (mocked)
    def get_dashboard_metrics(self):
        active = len([c for c in self.campaigns.values() if c.status == "active"])
        return {
            "active_campaigns": {"count": active, "change": "+3 this week"},
            "market_insights": {"count": len(self.market_signals), "change": "+127 today"},
            "competitor_tracking": {"count": 23, "change": "5 active alerts"},
            "ai_generations": {"count": 156, "change": "+42 this month"},
        }

# Singleton
storage = MemStorage()
```

---

## üìÅ `app/services/__init__.py`

```python
from .campaign_generator import CampaignGenerator
```

---

## üìÑ `app/services/campaign_generator.py`

```python
import uuid
import random
from datetime import datetime, timedelta
from typing import List, Optional
from ..models import (
    Service,
    MarketSignal,
    CampaignIdea,
    ChannelPlan,
    Campaign,
    CampaignGenerationRequest,
)

class CampaignGenerator:
    def __init__(self, services: List[Service], market_signals: List[MarketSignal]):
        self.services = services
        self.market_signals = market_signals

    def _generate_ideas(self, service: Service) -> List[CampaignIdea]:
        relevant_signals = [s for s in self.market_signals if s.relevance_score > 0.7]

        category = service.category
        if category in ["AI Platform", "Artificial Intelligence"]:
            theme = "Future-Proof Your AI Strategy"
            message = "Enterprise-grade AI with built-in governance and compliance"
            angle = "Unlike competitors, we offer SOC 2-compliant AI workflows"
        elif category in ["Cloud Security", "Security"]:
            theme = "Zero Trust, Zero Compromise"
            message = "End-to-end security from code to cloud"
            angle = "While others focus on detection, we prevent breaches at the source"
        elif category == "Cloud Infrastructure":
            theme = "Maximize Your Multi-Cloud Investment"
            message = "Unified management across all major cloud providers"
            angle = "Seamless integration with your existing tech stack"
        elif category in ["Data & Analytics", "Data Platform"]:
            theme = "Real-Time Intelligence, Real Business Impact"
            message = "Transform data into actionable insights at enterprise scale"
            angle = "Process and analyze data 10x faster than traditional platforms"
        elif category == "Edge & IoT":
            theme = "Bring Computing to the Edge"
            message = "Low-latency processing for IoT and edge devices"
            angle = "Deploy intelligence where your data is generated"
        else:
            theme = f"Maximize Your {category} Investment"
            message = "Integrated solutions for complex enterprise needs"
            angle = "Seamless integration with your existing tech stack"

        idea = CampaignIdea(
            id=str(uuid.uuid4())[:8],
            theme=theme,
            core_message=message,
            target_segments=service.target_audience,
            competitive_angle=angle,
        )
        return [idea]

    def _optimize_channel_mix(self, ideas: List[CampaignIdea]) -> List[ChannelPlan]:
        audiences = set()
        for idea in ideas:
            audiences.update(idea.target_segments)

        audience_list = list(audiences)
        is_security = any(
            "CISO" in a or "Security" in a or "Security Teams" in a for a in audience_list
        )

        if is_security:
            return [
                ChannelPlan(channel="LinkedIn", content_type="Thought Leadership", frequency="Weekly", budget_allocation=0.35, success_metrics=["Engagement Rate", "Lead Quality"]),
                ChannelPlan(channel="Webinars", content_type="Deep Dives", frequency="Bi-weekly", budget_allocation=0.25, success_metrics=["Attendee Count", "Conversion Rate"]),
                ChannelPlan(channel="Email", content_type="Nurture Sequences", frequency="Daily", budget_allocation=0.20, success_metrics=["Open Rate", "Click-Through"]),
                ChannelPlan(channel="Events", content_type="Executive Briefings", frequency="Monthly", budget_allocation=0.20, success_metrics=["Attendance", "Pipeline Generated"]),
            ]
        else:
            return [
                ChannelPlan(channel="LinkedIn", content_type="Product Updates", frequency="3x/week", budget_allocation=0.30, success_metrics=["Engagement Rate", "Follower Growth"]),
                ChannelPlan(channel="Email", content_type="Newsletter", frequency="Weekly", budget_allocation=0.25, success_metrics=["Open Rate", "Click-Through"]),
                ChannelPlan(channel="Blog", content_type="Technical Content", frequency="2x/week", budget_allocation=0.20, success_metrics=["Page Views", "Time on Page"]),
                ChannelPlan(channel="Webinars", content_type="How-To Sessions", frequency="Weekly", budget_allocation=0.25, success_metrics=["Registration", "Attendance"]),
            ]

    def generate_campaign_plan(
        self, request: CampaignGenerationRequest, service: Optional[Service] = None
    ) -> Campaign:
        target_service = service
        if not target_service:
            for s in self.services:
                if request.product_service.lower() in s.name.lower() or s.name.lower() in request.product_service.lower():
                    target_service = s
                    break

        if not target_service:
            target_service = Service(
                id=str(uuid.uuid4())[:8],
                name=request.product_service,
                category="Enterprise Solution",
                target_audience=[a.strip() for a in request.target_audience.split(",")],
                key_benefits=["Innovation", "Scalability", "Reliability"],
                competitors=[c.strip() for c in request.competitors.split(",")] if request.competitors else [],
            )

        ideas = self._generate_ideas(target_service)
        channel_mix = self._optimize_channel_mix(ideas)

        total_budget = round(50000 + random.random() * 50000)
        expected_roi = round(3.0 + random.random() * 2.0, 1)

        now = datetime.utcnow()
        duration = request.duration_days or 30
        end_date = now + timedelta(days=duration)

        campaign = Campaign(
            id=str(uuid.uuid4())[:8],
            name=f"{target_service.name} Campaign",
            status="draft",
            theme=ideas[0].theme if ideas else "Enterprise Campaign",
            start_date=now.strftime("%Y-%m-%d"),
            end_date=end_date.strftime("%Y-%m-%d"),
            ideas=ideas,
            channel_mix=channel_mix,
            total_budget=total_budget,
            expected_roi=expected_roi,
        )
        return campaign
```

---

## üìÑ `app/main.py`

```python
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from typing import List
from .models import (
    Campaign,
    MarketSignal,
    Service,
    CampaignGenerationRequest,
)
from .storage import storage
from .services import CampaignGenerator

app = FastAPI(title="NexusPlanner API", version="1.0")

# Enable CORS for frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/api/dashboard/metrics")
def get_dashboard_metrics():
    return storage.get_dashboard_metrics()

@app.get("/api/campaigns", response_model=List[Campaign])
def get_campaigns():
    return storage.get_campaigns()

@app.get("/api/campaigns/recent", response_model=List[Campaign])
def get_recent_campaigns():
    return storage.get_recent_campaigns()

@app.get("/api/campaigns/{campaign_id}", response_model=Campaign)
def get_campaign(campaign_id: str):
    campaign = storage.get_campaign_by_id(campaign_id)
    if not campaign:
        raise HTTPException(status_code=404, detail="Campaign not found")
    return campaign

@app.post("/api/campaigns/generate", response_model=Campaign)
def generate_campaign(request: CampaignGenerationRequest):
    services = storage.get_services()
    market_signals = storage.get_market_signals()
    generator = CampaignGenerator(services, market_signals)
    campaign = generator.generate_campaign_plan(request)
    saved = storage.create_campaign(campaign)

    # Add market signal
    storage.add_market_signal(
        MarketSignal(
            id="",
            source="Campaign Generator",
            content=f'New campaign generated: "{saved.name}" targeting {request.target_audience}',
            timestamp=datetime.utcnow().isoformat() + "Z",
            relevance_score=0.85,
            category="AI",
            impact="medium",
        )
    )
    return saved

@app.get("/api/market-intelligence", response_model=List[MarketSignal])
def get_market_intelligence():
    return storage.get_market_signals()

@app.get("/api/market-intelligence/recent", response_model=List[MarketSignal])
def get_recent_market_intelligence():
    return storage.get_recent_market_signals()

@app.get("/api/services", response_model=List[Service])
def get_services():
    return storage.get_services()

@app.get("/api/services/{service_id}", response_model=Service)
def get_service(service_id: str):
    service = storage.get_service_by_id(service_id)
    if not service:
        raise HTTPException(status_code=404, detail="Service not found")
    return service
```

---

## üöÄ Run the App

```bash
cd nexusplanner
pip install -r requirements.txt
uvicorn app.main:app --reload --port 5000
```

Now your FastAPI backend mirrors the TypeScript logic and is ready for GenAI integration.

Let me know if you want to:
- Add async support
- Connect to a real database (PostgreSQL, etc.)
- Integrate with an actual LLM/RAG system
- Dockerize the app

Happy coding! üß†üöÄ