# Stage 1: Builder - Install dependencies
FROM python:3.11-slim AS builder

WORKDIR /app

# Install UV package manager
RUN pip install --no-cache-dir uv

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Install dependencies with caching
RUN uv sync --frozen --no-dev

# Stage 2: Runtime - Production image
FROM python:3.11-slim AS runtime

WORKDIR /app

# Install UV in runtime for running the app
RUN pip install --no-cache-dir uv

# Copy virtual environment from builder
COPY --from=builder /app/.venv /app/.venv

# Copy application code
COPY app ./app
COPY alembic ./alembic
COPY alembic.ini ./
COPY pyproject.toml ./

# Create non-root user for security
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Environment variables (can be overridden at runtime)
ENV DATABASE_URL=""
ENV JWT_SECRET_KEY=""
ENV OPENAI_API_KEY=""
ENV AWS_REGION="us-east-1"
ENV AWS_ACCESS_KEY_ID=""
ENV AWS_SECRET_ACCESS_KEY=""
ENV LLM_PROVIDER="openai"
ENV BEDROCK_MODEL_NAME="claude-3-5-sonnet"
ENV USE_AI_GENERATION="true"
ENV RUN_MIGRATIONS_ON_STARTUP="false"
ENV DEMO_MODE="false"
ENV PYTHONUNBUFFERED=1
ENV PATH="/app/.venv/bin:$PATH"

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/').read()" || exit 1

# Run the application with uvicorn
ENTRYPOINT ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
